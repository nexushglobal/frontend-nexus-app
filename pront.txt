MODULO DE PUNTOS (points)
 Este modulo nos permite gestionar el historial de puntos de un usuario que se divide en las siguientes categorias con sus vistas
 - puntos de la plataforma
    * /dashboard/(cliente)/cli-puntos/historial-puntos - "Mis Puntos" (ya lo hicimos)
    * /dashboard/(cliente)/cli-puntos/historial-puntos/detalle-transaccion/:id - "Detalle de Transacción" (ya lo hicimos)
 - puntos de lote
    * /dashboard/(cliente)/cli-puntos/historial-puntos-lote - "Puntos Lote" (ya lo hicimos)
 - volumen semanal
    * /dashboard/(cliente)/cli-puntos/volumenes-semanales - "Volúmenes Semanales" (ya lo hicimos)
    * /dashboard/(cliente)/cli-puntos/volumenes-semanales/semana/:id - "Detalle de Transacción" (pendiente)

PUNTOS DE LA PLATAFORMA - "Mis Puntos"

# DATA
I. Consumir el action de getWeeklyVolumeAction pasandole el :id
 - Ubicación: src/features/point/action/get-weekly.ts
 - Se consumi desde el server

II. Consumir el service de getWeeklyVolumeHistory pasandole el :id
 - Ubicación: src/features/point/services/weekly.service.ts
 - Se consumi desde el client
 - params disponibles: limit y page

# UI
I. En la parte superior de la vista se debe mostrar los datos del action getWeeklyVolumeAction
 - Debe ser una card por cada uno de los datos
 - Debe tener un diseño atractivo

II. Después debajo debe haber un boton de mostrar historial de volumen el cual consumira el servicio de getWeeklyVolumeHistory
 - Debe mostrar la info en una tabla (desktop) y cards (mobile)
 - Usar los componentes de shared que ya estan creados para la tabla y paginacion
 - Tener como referencia /dashboard/(cliente)/cli-puntos/historial-puntos/detalle-transaccion/page.txt

# CONSIDERACIONES
* Para datos con paginacion
 - implementar la logica de paginacion en el cliente
 - Usar los componentes de shared que ya estan creados para la tabla y paginacion
 - Tener como referencia /dashboard/(cliente)/cli-puntos/historial-puntos/detalle-transaccion/page.txt
* usar los componentes de shared si es necesario
* mantener los colores del Proyecto de src/styles/globals.css
* mantener la estructura que vengo manejando usando page como puente al feature donde esta todos los componentes y logica
* crear un archivo de constans para tipos o status haciendo la traduccion correspondiente


///

Quiero que tomes de referencia src/app/dashboard/(cliente)/cli-puntos/historial-puntos/page.tsx

para crear la vista de puntos de lote "Puntos Lote" en la ruta /dashboard/(cliente)/cli-puntos/historial-puntos-lote

lo que cambia es la consulta a los datos, se tiene que usar
-getUserPointsLotAction server
-getUserLotTransactions client
los tipos tambien cambian
  type: 'LOT_BINARY_COMMISSION' | 'LOT_DIRECT_BONUS' | 'LOT_WITHDRAWAL';
la tabla ya no tiene metadata por lo que no es necesario
tampoco debe haber action para redirigir al detalle ya que esto no existe
el resto se mantiene parecido

///

Quiero que implementemos la parte de realizar un reconsumo que dejamos pendiente, en el archivo src/features/membership/components/ReconsumptionsSummary.tsx
por ahora tenemos un onClick que muestra una alerta, vamos a cambiar eso por algo muy similar a lo que tenemos cuando adquirimos un plan
en el archivo src/features/membership/components/PaymentSubscriptionSheet.tsx

de hecho la logica es muy parecida solo cambia unos cuantos  datos y el output
-suscription
   (action)
   src/features/membership/actions/suscription-to-plan.ts (subscribeToPlanAction)
   (input)
   ```export interface PaymentReconsumptionRequest extends BasePaymentRequest {
      membershipId: number;
   }```
   (output)
  ``` export interface ReconsumptionResult {
   totalAmount: number;
      membership: {
         id: number;
         planName: string;
         status: string;
         endDate: string;
      };
      payment: {
         id: string;
      };
   }```
-reconsumption
   (action)
   src/features/membership/actions/reconsumption.ts (reconsumtionAction)
   (input)
   ```export interface PaymentReconsumptionRequest extends BasePaymentRequest {
      membershipId: number;
   }
   ```
   (output)
   ```export interface ReconsumtionResult {
      totalAmount: number;
      paymentId: number;
      reconsumption: {
         periodDate: string;
      };
   }```

como podras darte cuenta ambos parten de un BasePaymentRequest
los metodos en el pago son 3, uno por puntos que por ahora no estara impletando pero los otros dos metodos si estaran implementados los cuales son:
- pasarela de pago
- mediante voucher

mientras que en el plan se evalua el precio del plan o el descuento en caso de ser upgrade, en reconsumo se evalua el consto del reconsumo

lo que quiero es que estraigas todo esta logica a un componente src/feature/shared y lo reutilices en ambos casos, por que en un futuro tendre
otros pagos como pagar entrada y evento y se maneja partiendo de BasePaymentRequest, el output siempre cambiara.
es importande por ahora dejar inavilitado la parte de pago con puntos
tener en cuenta que al terminar la ejecucion debe mostrar un modal del resultado


bien ahora quiero que implementemos para crear un pedido en el archivo CartClientPage src/features/ecommerce/components/pages/CartClientPage.tsx

-order
   (action)
   src/features/ecommerce/actions/create-order.ts (createOrderAction)
   (input)
   ```export interface OrderItem {
  productId: number;
  quantity: number;
}
export interface PaymentOrderRequest extends BasePaymentRequest {
  notes?: string;
  paymentReference?: string;
  totalAmount: number;
  items: OrderItem[];
}
   ```
   (output)
   ```export interface OrderResult {
  totalAmount: number;
  paymentId: number;
  order: {
    totalItems: number;
    items: {
      productId: number;
      name: string;
      quantity: number;
    }[];
  };
}```
